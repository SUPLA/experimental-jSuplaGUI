buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}

	dependencies {
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
		classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
		classpath 'org.gradle.api.plugins:gradle-izpack-plugin:0.2.3'
		classpath 'com.github.cr0:gradle-macappbundle-plugin:3.1.0'
		classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.2'
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
		classpath 'de.gliderpilot.gradle.jnlp:gradle-jnlp-plugin:1.2.5'
		classpath 'net.nemerosa:versioning:2.6.1'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
		classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
	}
}

apply plugin: 'groovy'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.kotlin.kapt'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'net.nemerosa.versioning'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}

Date buildTimeAndDate = new Date()
ext {
	buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
	buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
	macosx = System.getProperty('os.name').contains('Mac OS')
	resourceFilePatterns = [
			'**/*.properties',
			'**/*.groovy',
			'**/*.html',
			'**/*.xml',
			'**/*.txt'
	]
}

mainClassName = 'org.supla.gui.LauncherKt'

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/javafx-plugin.gradle'
apply from: 'gradle/integration-test.gradle'
apply from: 'gradle/functional-test.gradle'
apply from: 'gradle/package.gradle'
apply from: 'gradle/docs.gradle'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'kotlin-allopen'

jfx {
	verbose = true
	deployDir = "${project.rootDir}/src/main/deploy"
	mainClass = mainClassName
	allPermissions = true
	keyStoreAlias = 'example-user'
	keyStorePassword = 'example-password'
	jfxMainAppJarName = jar.archiveName
	appName = project.name
	vendor = 'Supla Team'
	identifier = project.group
	nativeReleaseVersion = version
}

repositories {
	jcenter()
	mavenLocal()
	maven { url "https://dl.bintray.com/big-boy/bigboy" }
}

dependencies {
	kapt "org.codehaus.griffon:griffon-core-compile:${griffonVersion}"
	compileOnly "org.codehaus.griffon:griffon-core-compile:${griffonVersion}"
	testCompileOnly "org.codehaus.griffon:griffon-core-compile:${griffonVersion}"

	compile "org.codehaus.griffon:griffon-javafx:${griffonVersion}"
	compile "org.codehaus.griffon:griffon-guice:${griffonVersion}"
	compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
	compile 'com.jfoenix:jfoenix:8.0.8'
	compile 'pl.grzeslowski.jsupla.api:jsupla-api:3.5.3'
	compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

	// FontAwesome
	// Versions higher than 2.x are for Java 11
	compile 'org.kordamp.ikonli:ikonli-javafx:2.4.0'
	compile 'org.kordamp.ikonli:ikonli-fontawesome5-pack:2.4.0'

	testCompile "org.codehaus.griffon:griffon-javafx-test:${griffonVersion}"
	testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
	testCompile "org.spockframework:spock-core:${spockVersion}"
	testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'

	functionalTestCompile "org.codehaus.griffon:griffon-javafx-test:${griffonVersion}"
}

task sourceJar(type: Jar) {
	group 'Build'
	description 'An archive of the source code'
	classifier 'sources'
	from sourceSets.main.allSource
}

sourceSets {
	//noinspection GroovyAssignabilityCheck
	main {
		kotlin {
			srcDirs += [
					'griffon-app/conf',
					'griffon-app/controllers',
					'griffon-app/models',
					'griffon-app/views',
					'griffon-app/services',
					'griffon-app/lifecycle',
					'src/main/java',
					'src/main/kotlin'
			]
		}
		resources {
			srcDirs += [
					'griffon-app/resources',
					'griffon-app/i18n',
					'src/main/resources'
			]
		}
	}
}

processResources {
	filesMatching(resourceFilePatterns) {
		expand(
				'application_name': project.name,
				'application_version': project.version,
				'griffon_version': project.version,
				'build_date': buildDate,
				'build_time': buildTime,
				'build_revision': versioning.info.commit
		)
	}
}

processTestResources {
	filesMatching(resourceFilePatterns) {
		expand(
				'application_name': project.name,
				'application_version': project.version,
				'griffon_version': project.version,
				'build_date': buildDate,
				'build_time': buildTime,
				'build_revision': versioning.info.commit
		)
	}
}

stats {
	paths += [
			model     : [name: 'Models', path: 'griffon-app/models'],
			view      : [name: 'Views', path: 'griffon-app/views'],
			controller: [name: 'Controllers', path: 'griffon-app/controllers'],
			service   : [name: 'Services', path: 'griffon-app/services'],
			config    : [name: 'Configuration', path: 'griffon-app/conf'],
			lifecycle : [name: 'Lifecycle', path: 'griffon-app/lifecycle']
	]
}

compileGroovy.enabled = false

tasks.withType(JavaCompile) {
	sourceCompatibility = project.sourceCompatibility
	targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
	sourceCompatibility = project.sourceCompatibility
	targetCompatibility = project.targetCompatibility
}

import java.text.SimpleDateFormat

startScripts {
	doLast {
		if (!macosx) unixScript.text = unixScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
		windowsScript.text = windowsScript.text.replaceAll('"(-Xdock:(name|icon)=)([^"]*?)(")', ' ')
	}
}

if (hasProperty('debugRun') && ((project.debugRun as boolean))) {
	//noinspection GroovyAssignabilityCheck
	run {
		jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
	}
}

task jacocoRootMerge(type: org.gradle.testing.jacoco.tasks.JacocoMerge, dependsOn: [test, jacocoTestReport, jacocoIntegrationTestReport, jacocoFunctionalTestReport]) {
	executionData = files(jacocoTestReport.executionData, jacocoIntegrationTestReport.executionData, jacocoFunctionalTestReport.executionData)
	destinationFile = file("${buildDir}/jacoco/root.exec")
}

task jacocoRootReport(dependsOn: jacocoRootMerge, type: JacocoReport) {
	group = 'Reporting'
	description = 'Generate Jacoco coverage reports after running all tests.'
	executionData file("${buildDir}/jacoco/root.exec")
	sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	classDirectories = files(sourceSets.main.output)
	reports {
		csv.enabled = false
		xml.enabled = true
		html.enabled = true
		html.destination = file("${buildDir}/reports/jacoco/root/html")
		xml.destination = file("${buildDir}/reports/jacoco/root/root.xml")
	}
}

allOpen {
	//noinspection GrUnresolvedAccess
	annotation("griffon.metadata.ArtifactProviderFor")
}

task createStartScripts(type: CreateStartScripts) {
	outputDir = file("$buildDir/native")
	mainClassName = 'org.supla.gui.LauncherKt'
	applicationName = project.name
	classpath = files(jar.archiveFileName)
}

task copyFatJar(type: Copy, dependsOn: 'jar') {
	from "$buildDir/libs", {
		include "${project.name}*.jar"
	}
	into createStartScripts.outputDir.path + "/lib"
}

task bundleNativeApp(type: Zip, dependsOn: ['createStartScripts', 'copyFatJar']) {
	destinationDirectory = file("$buildDir")
	from tasks.createStartScripts.outputDir.path
	archiveBaseName.set(project.name)
	archiveClassifier.set('native')
	fileMode 777
}
tasks.build.dependsOn 'bundleNativeApp'
